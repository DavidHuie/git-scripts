#!/bin/bash

# github-fetcher
# by: David Huie
#
# This utility runs a `git fetch` command on each of
# a local git repository's remote Github repos. Use this
# utility to create cronjobs for maintaining Github
# backup repos.
#
# Usage:
#     github-fetcher GIT_SSH GIT_DIR REPO_NAME
#
# GIT_SSH: a script that takes the place of SSH. Use this
#   to specify a custom SSH key for Github. See the git
#   man page for more information.
#
# GIT_DIR: the path to the local git repository. If this
#   is a non-bare git repository, then this is the .git
#   directory within a clone.
#
# REPO_NAME: a repository name used for logging

usage () {
    echo "github-fetcher -- fetch updates for all of a repository's Github remotes."
    echo
    echo "  Usage:"
    echo "      github-fetcher GIT_SSH GIT_DIR REPO_NAME"
    exit 0
}

init_log_file () {
    exec >> "$LOG_DIR/${REPO_NAME}.log" 2>&1

    echo "====="
    echo "***** DATE=$(date)"
    echo "***** REPO_NAME=$REPO_NAME"
    echo "***** USER=$USER"
    echo "***** GIT_DIR=$GIT_DIR"
    echo "***** GIT_SSH=$GIT_SSH"
}

list_remotes () {
    git remote -v | grep github | awk '{print $1}' | uniq
}

if [ ! "$1" ]; then
    usage
fi

# Make sure that this directory is writable!
LOG_DIR="/var/log/github-fetcher"

export GIT_SSH="$1"
export GIT_DIR="$2"
REPO_NAME="$3"

init_log_file

for remote in $(list_remotes); do
    echo "***** Fetching remote ${remote}..."
    git fetch "$remote"
    echo "***** Done."
done

echo "====="
